package br.ufba.dcc.wiser.soft_iot.ontology_schema;


import org.apache.jena.ontology.DatatypeProperty;
import org.apache.jena.ontology.ObjectProperty;
import org.apache.jena.ontology.OntModel;
import org.apache.jena.rdf.model.*;
 
/**
 * Vocabulary definitions from /home/absinto/Nailton/cloudsemanticwot/pswot-cloud-projects/pswot-cloud-java-jena-schemagenSSN/src/main/resources/ssn.owl 
 * @author Auto-generated by schemagen on 11 Jul 2016 17:46 
 */
public class SSN {
	
static String SSN = "http://purl.oclc.org/NET/ssnx/ssn#";
	
    /** <p>The RDF model that holds the vocabulary terms</p> */
    private static OntModel m_model = ModelFactory.createOntologyModel();
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://purl.oclc.org/NET/ssnx/ssn#";
    
    public static final String NameSpace = "ssn";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** <p>The closeness of agreement between the value of an observation and the true 
     *  value of the observed quality.</p>
     */
    public static final Resource Accuracy = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Accuracy" );
    
    /** <p>Total useful life of a battery.</p> */
    public static final Resource BatteryLifetime = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#BatteryLifetime" );
    
    /** <p>Used to specify ranges for qualities that act as conditions on a system/sensor's 
     *  operation. For example, wind speed of 10-60m/s is expressed as a condition 
     *  linking a quality, wind speed, a unit of measurement, metres per second, and 
     *  a set of values, 10-60, and may be used as the condition on a MeasurementProperty, 
     *  for example, to state that a sensor has a particular accuracy in that condition.</p>
     */
    public static final Resource Condition = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Condition" );
    
    /** <p>The ongoing Process of Entities (for the purposes of this ontology, mainly 
     *  sensors) deployed for a particular purpose. For example, a particular Sensor 
     *  deployed on a Platform, or a whole network of Sensors deployed for an observation 
     *  campaign. The deployment may have sub processes, such as installation, maintenance, 
     *  addition, and decomissioning and removal.</p>
     */
    public static final Resource Deployment = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Deployment" );
    
    /** <p>Place to group all the various Processes related to Deployment. For example, 
     *  as well as Deplyment, installation, maintenance, deployment of further sensors 
     *  and the like would all be classified under DeploymentRelatedProcess.</p>
     */
    public static final Resource DeploymentRelatedProcess = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#DeploymentRelatedProcess" );
    
    /** <p>An observed value for which the probability of falsely claiming the absence 
     *  of a component in a material is Î², given a probability Î± of falsely claiming 
     *  its presence.</p>
     */
    public static final Resource DetectionLimit = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#DetectionLimit" );
    
    /** <p>A device is a physical piece of technology - a system in a box. Devices may 
     *  of course be built of smaller devices and software components (i.e. systems 
     *  have components).</p>
     */
    public static final Resource Device = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Device" );
    
    /** <p>A, continuous or incremental, change in the reported values of observations 
     *  over time for an unchanging quality.</p>
     */
    public static final Resource Drift = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Drift" );
    
    /** <p>A feature is an abstraction of real world phenomena (thing, person, event, 
     *  etc).</p>
     */
    public static final Resource FeatureOfInterest = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#FeatureOfInterest" );
    
    /** <p>The smallest possible time between one observation and the next.</p> */
    public static final Resource Frequency = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Frequency" );
    
    /** <p>Any information that is provided to a process for its use [MMI OntDev]</p> */
    public static final Resource Input = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Input" );
    
    /** <p>The time between a request for an observation and the sensor providing a result.</p> */
    public static final Resource Latency = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Latency" );
    
    /** <p>Schedule of maintenance for a system/sensor in the specified conditions.</p> */
    public static final Resource MaintenanceSchedule = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#MaintenanceSchedule" );
    
    /** <p>Collects together measurement properties (accuracy, range, precision, etc) 
     *  and the environmental conditions in which those properties hold, representing 
     *  a specification of a sensor's capability in those conditions. The conditions 
     *  specified here are those that affect the measurement properties, while those 
     *  in OperatingRange represent the sensor's standard operating conditions, including 
     *  conditions that don't affect the observations.</p>
     */
    public static final Resource MeasurementCapability = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#MeasurementCapability" );
    
    /** <p>An identifiable and observable characteristic of a sensor's observations or 
     *  ability to make observations.</p>
     */
    public static final Resource MeasurementProperty = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#MeasurementProperty" );
    
    /** <p>The set of values that the sensor can return as the result of an observation 
     *  under the defined conditions with the defined measurement properties. (If 
     *  no conditions are specified or the conditions do not specify a range for the 
     *  observed qualities, the measurement range is to be taken as the condition 
     *  for the observed qualities.)</p>
     */
    public static final Resource MeasurementRange = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#MeasurementRange" );
    
    /** <p>An Observation is a Situation in which a Sensing method has been used to estimate 
     *  or calculate a value of a Property of a FeatureOfInterest. Links to Sensing 
     *  and Sensor describe what made the Observation and how; links to Property and 
     *  Feature detail what was sensed; the result is the output of a Sensor; other 
     *  metadata details times etc.</p>
     */
    public static final Resource Observation = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Observation" );
    
    /** <p>The value of the result of an Observation. An Observation has a result which 
     *  is the output of some sensor, the result is an information object that encodes 
     *  some value for a Feature.</p>
     */
    public static final Resource ObservationValue = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#ObservationValue" );
    
    /** <p>Power range in which system/sensor is expected to operate.</p> */
    public static final Resource OperatingPowerRange = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#OperatingPowerRange" );
    
    /** <p>An identifiable characteristic of the environmental and other conditions in 
     *  which the sensor is intended to operate. May include power ranges, power sources, 
     *  standard configurations, attachments and the like.</p>
     */
    public static final Resource OperatingProperty = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#OperatingProperty" );
    
    /** <p>The environmental conditions and characteristics of a system/sensor's normal 
     *  operating environment. Can be used to specify for example the standard environmental 
     *  conditions in which the sensor is expected to operate (a Condition with no 
     *  OperatingProperty), or how the environmental and other operating properties 
     *  relate: i.e., that the maintenance schedule or power requirements differ according 
     *  to the conditions.</p>
     */
    public static final Resource OperatingRange = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#OperatingRange" );
    
    /** <p>Any information that is reported from a process. [MMI OntDev]</p> */
    public static final Resource Output = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Output" );
    
    /** <p>An Entity to which other Entities can be attached - particuarly Sensors and 
     *  other Platforms. For example, a post might act as the Platform, a bouy might 
     *  act as a Platform, or a fish might act as a Platform for an attached sensor.</p>
     */
    public static final Resource Platform = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Platform" );
    
    /** <p>The closeness of agreement between replicate observations on an unchanged 
     *  or similar quality value: i.e., a measure of a sensor's ability to consitently 
     *  reproduce an observation.</p>
     */
    public static final Resource Precision = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Precision" );
    
    /** <p>A process has an output and possibly inputs and, for a composite process, 
     *  describes the temporal and dataflow dependencies and relationships amongst 
     *  its parts. [SSN XG]</p>
     */
    public static final Resource Process = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Process" );
    
    /** <p>An observable Quality of an Event or Object. That is, not a quality of an 
     *  abstract entity as is also allowed by DUL's Quality, but rather an aspect 
     *  of an entity that is intrinsic to and cannot exist without the entity and 
     *  is observable by a sensor.</p>
     */
    public static final Resource Property = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Property" );
    
    /** <p>The smallest difference in the value of a quality being observed that would 
     *  result in perceptably different values of observation results.</p>
     */
    public static final Resource Resolution = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Resolution" );
    
    /** <p>The time between a (step) change inthe value of an observed quality and a 
     *  sensor (possibly with specified error) 'settling' on an observed value.</p>
     */
    public static final Resource ResponseTime = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#ResponseTime" );
    
    /** <p>Selectivity is a property of a sensor whereby it provides observed values 
     *  for one or more qualities such that the values of each quality are independent 
     *  of other qualities in the phenomenon, body, or substance being investigated.</p>
     */
    public static final Resource Selectivity = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Selectivity" );
    
    /** <p>Sensing is a process that results in the estimation, or calculation, of the 
     *  value of a phenomenon.</p>
     */
    public static final Resource Sensing = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Sensing" );
    
    /** <p>A sensing device is a device that implements sensing.</p> */
    public static final Resource SensingDevice = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#SensingDevice" );
    
    /** <p>Sensitivity is the quotient of the change in a result of sensor and the corresponding 
     *  change in a value of a quality being observed.</p>
     */
    public static final Resource Sensitivity = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Sensitivity" );
    
    /** <p>A sensor can do (implements) sensing: that is, a sensor is any entity that 
     *  can follow a sensing method and thus observe some Property of a FeatureOfInterest. 
     *  Sensors may be physical devices, computational methods, a laboratory setup 
     *  with a person following a method, or any other thing that can follow a Sensing 
     *  Method to observe a Property.</p>
     */
    public static final Resource Sensor = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Sensor" );
    
    /** <p>A data sheet records properties of a sensor. A data sheet might describe for 
     *  example the accuracy in various conditions, the power use, the types of connectors 
     *  that the sensor has, etc. Generally a sensor's properties are recorded directly 
     *  (with hasMeasurementCapability, for example), but the data sheet can be used 
     *  for example to record the manufacturers specifications verses observed capabilites, 
     *  or if more is known than the manufacturer specifies, etc. The data sheet is 
     *  an information object about the sensor's properties, rather than a direct 
     *  link to the actual properties themselves.</p>
     */
    public static final Resource SensorDataSheet = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#SensorDataSheet" );
    
    /** <p>An Event in the real world that 'triggers' the sensor. The properties associated 
     *  to the stimulus may be different to eventual observed property. It is the 
     *  event, not the object that triggers the sensor.</p>
     */
    public static final Resource SensorInput = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#SensorInput" );
    
    /** <p>A sensor outputs a piece of information (an observed value), the value itself 
     *  being represented by an ObservationValue.</p>
     */
    public static final Resource SensorOutput = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#SensorOutput" );
    
    /** <p>An Event in the real world that 'triggers' the sensor. The properties associated 
     *  to the stimulus may be different to eventual observed property. It is the 
     *  event, not the object that triggers the sensor.</p>
     */
    public static final Resource Stimulus = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#Stimulus" );
    
    /** <p>An identifiable characteristic that represents the extent of the sensors useful 
     *  life. Might include for example total battery life or number of recharges, 
     *  or, for sensors that are used only a fixed number of times, the number of 
     *  observations that can be made before the sensing capability is depleted.</p>
     */
    public static final Resource SurvivalProperty = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#SurvivalProperty" );
    
    /** <p>The conditions a sensor can be exposed to without damage: i.e., the sensor 
     *  continues to operate as defined using MeasurementCapability. If, however, 
     *  the SurvivalRange is exceeded, the sensor is 'damaged' and MeasurementCapability 
     *  specifications may no longer hold.</p>
     */
    public static final Resource SurvivalRange = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#SurvivalRange" );
    
    /** <p>System is a unit of abstraction for pieces of infrastructure (and we largely 
     *  care that they are) for sensing. A system has components, its subsystems, 
     *  which are other systems.</p>
     */
    public static final Resource System = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#System" );
    
    /** <p>Total useful life of a sensor/system (expressed as total life since manufacture, 
     *  time in use, number of operations, etc.).</p>
     */
    public static final Resource SystemLifetime = m_model.createResource( "http://purl.oclc.org/NET/ssnx/ssn#SystemLifetime" );
    
    
    public static final ObjectProperty hasValue = m_model.createObjectProperty("http://purl.oclc.org/NET/ssnx/ssn#hasValue");
    
    public static final ObjectProperty observationSamplingTime = m_model.createObjectProperty("http://purl.oclc.org/NET/ssnx/ssn#observationSamplingTime");
    
    public static final ObjectProperty observationResult = m_model.createObjectProperty("http://purl.oclc.org/NET/ssnx/ssn#observationResult");
    
    public static final ObjectProperty madeObservation = m_model.createObjectProperty("http://purl.oclc.org/NET/ssnx/ssn#madeObservation");
    
    public static final ObjectProperty startTime = m_model.createObjectProperty("http://purl.oclc.org/NET/ssnx/ssn#startTime");
    
    public static final ObjectProperty endTime = m_model.createObjectProperty("http://purl.oclc.org/NET/ssnx/ssn#endTime");
    
    public static final ObjectProperty hasSubSystem = m_model.createObjectProperty(SSN + "hasSubSystem");
    
    public static final ObjectProperty observedProperty = m_model.createObjectProperty(SSN + "observedProperty");
    
    public static final ObjectProperty observedBy = m_model.createObjectProperty(SSN + "observedBy");
    
    
    
}